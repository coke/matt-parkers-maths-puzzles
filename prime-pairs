#!/usr/bin/env raku

# https://www.think-maths.co.uk/primepairs

# Original puzzle: Given the numbers from one to nine, put them in order so that each pair
# sums to a prime number

# We allow user to set min & max of the range of numbers, and output all the
# possible solutions

# --min - the smallest number used in the list
# --max - the largest number

sub MAIN(:$min=1, :$max=9) {
    # Get all combinations of numbers in this range that sum to a prime.
    # Create path object with key/value pairs going in both directions.
    my %paths;
    for ($min..$max).combinations(2).grep(*.sum.is-prime) {
        my $left = $_[0];
        my $right = $_[1];
        %paths{$left}.push: $right;
        %paths{$right}.push: $left;
    }

    # If we are are the path size, return the formatted path
    # Otherwise, see if we can take a step in any direction and try again
    sub check-path($size, %paths, *@path) {
        return @path.join(', ') if @path == $size; # we got there.

        my $last = @path[*-1];
        gather {
            for %paths{$last}.values -> $next {
                next if @path.first($next); # no duplicates
                .take for check-path($size, %paths, @path, $next);
            }
        }
    }

    # for each of the keys, see if there is a path to be found that
    # does not repeat any steps and uses each number in the range
    for %paths.keys.sort -> $key {
        .say for check-path($max-$min+1, %paths, $key);
    }
}
